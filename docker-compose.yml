version: '3.8'

services:
  # Main Zorix Agent API service
  zorix-agent:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: zorix-agent
    ports:
      - "8000:8000"
      - "5678:5678"  # Debug port
    environment:
      - ZORIX_ENV=development
      - BEDROCK_REGION=us-east-1
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - ENABLE_TRACING=false
      - WORKSPACE_ROOT=/app/workspace
      - VECTOR_INDEX_PATH=/app/data/vector_index
      - MEMORY_DB_PATH=/app/data/memory.db
      - AUDIT_LOG_FILE=/app/logs/audit.log
    volumes:
      - ./:/app
      - zorix_data:/app/data
      - zorix_logs:/app/logs
      - zorix_workspace:/app/workspace
    networks:
      - zorix-network
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: zorix-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - zorix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: zorix-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=zorix
      - POSTGRES_USER=zorix
      - POSTGRES_PASSWORD=zorix_dev_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - zorix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zorix -d zorix"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for distributed tracing (optional)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: zorix-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - zorix-network
    restart: unless-stopped
    profiles:
      - observability

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: zorix-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - zorix-network
    restart: unless-stopped
    profiles:
      - observability

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: zorix-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - zorix-network
    restart: unless-stopped
    profiles:
      - observability

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: zorix-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
    networks:
      - zorix-network
    depends_on:
      - zorix-agent
    restart: unless-stopped
    profiles:
      - production

volumes:
  zorix_data:
    driver: local
  zorix_logs:
    driver: local
  zorix_workspace:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  zorix-network:
    driver: bridge