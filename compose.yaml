version: '3.8'

services:
  zorix-agent:
    build:
      context: .
      dockerfile: infra/docker/agent.Dockerfile
    container_name: zorix-agent
    ports:
      - "8000:8000"
    environment:
      - WORKSPACE_ROOT=/app/workspace
      - APP_PORT=8000
      - BEDROCK_REGION=${BEDROCK_REGION:-us-east-1}
      - BEDROCK_MODEL_ID=${BEDROCK_MODEL_ID:-anthropic.claude-3-5-sonnet-20240620-v1:0}
      - BEDROCK_EMBED_MODEL_ID=${BEDROCK_EMBED_MODEL_ID:-amazon.titan-embed-text-v2:0}
      - MAX_TOKENS=${MAX_TOKENS:-4000}
      - TEMPERATURE=${TEMPERATURE:-0.2}
      - REQUEST_TIMEOUT_SECS=${REQUEST_TIMEOUT_SECS:-120}
      - COMMAND_ALLOWLIST=${COMMAND_ALLOWLIST:-npm,yarn,pnpm,pytest,python,node,go,java,mvn,gradle,make}
      - COMMAND_TIMEOUT_SECS=${COMMAND_TIMEOUT_SECS:-90}
      - GIT_AUTHOR_NAME=${GIT_AUTHOR_NAME:-Zorix Agent}
      - GIT_AUTHOR_EMAIL=${GIT_AUTHOR_EMAIL:-zorix@local}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-}
      # AWS credentials (pass through from host)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - AWS_REGION=${AWS_REGION:-us-east-1}
    volumes:
      # Mount workspace directory
      - ./workspace:/app/workspace
      # Mount data directory for persistence
      - zorix-data:/app/data
      # Mount logs directory
      - zorix-logs:/app/logs
      # Mount .aws directory for credentials (optional)
      - ${HOME}/.aws:/home/zorix/.aws:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - zorix-network

  # Optional: Redis for enhanced caching (future enhancement)
  redis:
    image: redis:7-alpine
    container_name: zorix-redis
    ports:
      - "6379:6379"
    volumes:
      - zorix-redis-data:/data
    restart: unless-stopped
    networks:
      - zorix-network
    profiles:
      - redis

  # Optional: OpenTelemetry Collector for observability
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: zorix-otel
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./infra/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
    restart: unless-stopped
    networks:
      - zorix-network
    profiles:
      - observability

volumes:
  zorix-data:
    driver: local
  zorix-logs:
    driver: local
  zorix-redis-data:
    driver: local

networks:
  zorix-network:
    driver: bridge
